https://practice.geeksforgeeks.org/problems/minimum-cost-path3833/1/?category[]=Graph&category[]=Graph&page=2&query=category[]Graphpage2category[]Graph

    bool isValidMove(int i,int j,int n)
    {
        return (i>=0 && i<n && j>=0 && j<n); 
    }
    
    int minimumCostPath(vector<vector<int>>& grid) {
        // Code here
        int n=grid.size();
        int dp[n][n];
        for(int i=0;i<n;i++)
            for(int j=0;j<n;j++)
                dp[i][j]=INT_MAX;
        dp[0][0]=grid[0][0];
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>>pq;
        pq.push({dp[0][0],{0,0}});
        while(!pq.empty())
        {
            int i=pq.top().second.first;
            int j=pq.top().second.second;
            pq.pop();
            if(isValidMove(i+1,j,n) && dp[i][j]+grid[i+1][j]<dp[i+1][j])
            {
                dp[i+1][j]=dp[i][j]+grid[i+1][j];
                pq.push({dp[i+1][j],{i+1,j}});
            }
            if(isValidMove(i-1,j,n) && dp[i][j]+grid[i-1][j]<dp[i-1][j])
            {
                dp[i-1][j]=dp[i][j]+grid[i-1][j];
                pq.push({dp[i-1][j],{i-1,j}});
            }
            if(isValidMove(i,j+1,n) && dp[i][j]+grid[i][j+1]<dp[i][j+1])
            {
                dp[i][j+1]=dp[i][j]+grid[i][j+1];
                pq.push({dp[i][j+1],{i,j+1}});
            }
            if(isValidMove(i,j-1,n) && dp[i][j]+grid[i][j-1]<dp[i][j-1])
            {
                dp[i][j-1]=dp[i][j]+grid[i][j-1];
                pq.push({dp[i][j-1],{i,j-1}});
            }
        }
        return dp[n-1][n-1];
        
    }
