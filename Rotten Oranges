https://practice.geeksforgeeks.org/problems/rotten-oranges2536/1/?category[]=Graph&category[]=Graph&page=1&query=category[]Graphpage1category[]Graph

    bool isSafe(vector<vector<int>>& grid,int m,int n,int i,int j)
    {
        return (i>=0 && i<m && j>=0 && j<n && grid[i][j]==1);
    }
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        int m=grid.size(),n=grid[0].size();
        int timer=-1;
        queue<pair<int,int>>q;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==2)
                {
                    q.push({i,j});
                    grid[i][j]=3;
                }
            }
        }
        while(!q.empty())
        {
            int count=q.size();
            while(count--){
                int i=q.front().first;
                int j=q.front().second;
                q.pop();
                if(isSafe(grid,m,n,i,j+1))
                {
                    q.push({i,j+1});
                    grid[i][j+1]=3;
                }
                if(isSafe(grid,m,n,i,j-1))
                {
                    q.push({i,j-1});
                    grid[i][j-1]=3;
                }
                if(isSafe(grid,m,n,i+1,j))
                {
                    q.push({i+1,j});
                    grid[i+1][j]=3;
                }
                if(isSafe(grid,m,n,i-1,j))
                {
                    q.push({i-1,j});
                    grid[i-1][j]=3;
                }
            }
            timer++;
        }
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                if(grid[i][j]==1)
                    return -1;
        return timer;
    }
