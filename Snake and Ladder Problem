https://practice.geeksforgeeks.org/problems/snake-and-ladder-problem4816/1/?category[]=Graph&category[]=Graph&page=2&query=category[]Graphpage2category[]Graph

    int minThrow(int n, int arr[]){
        // code here
        unordered_map<int,int>mp;
        queue<int>q;
        for(int i=0;i<2*n;i+=2)
            mp[arr[i]]=arr[i+1];
        bool visited[31];
        for(int i=0;i<31;i++)
            visited[i]=false;
        visited[1]=true;
        q.push(1);
        int res=0;
        while(!q.empty())
        {
            int count=q.size();
            while(count--)
            {
                int curr=q.front();
                q.pop();
                if(curr+1<=30 && visited[curr+1]==false)
                {
                    visited[curr+1]=true;
                    q.push(curr+1);
                    if(mp.find(curr+1)!=mp.end())
                    {
                        if(visited[mp[curr+1]]==false)
                        {
                            visited[mp[curr+1]]=true;
                            q.push(mp[curr+1]);
                        }
                    }
                }
                if(visited[30])
                    return res+1;
                if(curr+2<=30 && visited[curr+2]==false)
                {
                    visited[curr+2]=true;
                    q.push(curr+2);
                    if(mp.find(curr+2)!=mp.end())
                    {
                        if(visited[mp[curr+2]]==false)
                        {
                            visited[mp[curr+2]]=true;
                            q.push(mp[curr+2]);
                        }
                    }
                }
                if(visited[30])
                    return res+1;
                    
                if(curr+3<=30 && visited[curr+3]==false)
                {
                    visited[curr+3]=true;
                    q.push(curr+3);
                    if(mp.find(curr+3)!=mp.end())
                    {
                        if(visited[mp[curr+3]]==false)
                        {
                            visited[mp[curr+3]]=true;
                            q.push(mp[curr+3]);
                        }
                    }
                }
                if(visited[30])
                    return res+1;
                    
                if(curr+4<=30 && visited[curr+4]==false)
                {
                    visited[curr+4]=true;
                    q.push(curr+4);
                    if(mp.find(curr+4)!=mp.end())
                    {
                        if(visited[mp[curr+4]]==false)
                        {
                            visited[mp[curr+4]]=true;
                            q.push(mp[curr+4]);
                        }
                    }
                }
                if(visited[30])
                    return res+1;
                    
                if(curr+5<=30 && visited[curr+5]==false)
                {
                    visited[curr+5]=true;
                    q.push(curr+5);
                    if(mp.find(curr+5)!=mp.end())
                    {
                        if(visited[mp[curr+5]]==false)
                        {
                            visited[mp[curr+5]]=true;
                            q.push(mp[curr+5]);
                        }
                    }
                }
                if(visited[30])
                    return res+1;
                    
                if(curr+6<=30 && visited[curr+6]==false)
                {
                    visited[curr+6]=true;
                    q.push(curr+6);
                    if(mp.find(curr+6)!=mp.end())
                    {
                        if(visited[mp[curr+6]]==false)
                        {
                            visited[mp[curr+6]]=true;
                            q.push(mp[curr+6]);
                        }
                    }
                }
                if(visited[30])
                    return res+1;
                
            }
            res++;
        }
        return res;
    }
